#!/usr/bin/env bash
# Verifica se o pactl est√° instalado
command -v pactl >/dev/null 2>&1 || {
  echo "pactl n√£o est√° instalado. Por favor, instale-o primeiro."
  exit 1
}

# Fun√ß√£o para listar dispositivos de sa√≠da de √°udio (sinks) com descri√ß√µes amig√°veis
list_output_devices() {
  pactl list short sinks | while read -r line; do
    id=$(echo "$line" | awk '{print $1}')
    description=$(pactl list sinks | grep -A60 "^Sink #$id" | grep "node.nick =" | sed 's/.*node.nick = "\(.*\)"/\1/')
    if [ -z "$description" ]; then
      description=$(pactl list sinks | grep -A20 "^Sink #$id" | grep "Description:" | sed 's/Description: //')
    fi
    echo "$id - $description" # Inclui o ID junto com a descri√ß√£o
  done
}

# Fun√ß√£o para listar dispositivos de entrada de √°udio (sources) com descri√ß√µes amig√°veis
list_input_devices() {
  pactl list short sources | while read -r line; do
    id=$(echo "$line" | awk '{print $1}')
    description=$(pactl list sources | grep -A60 "^Source #$id" | grep "node.nick =" | sed 's/.*node.nick = "\(.*\)"/\1/')
    if [ -z "$description" ]; then
      description=$(pactl list sources | grep -A20 "^Source #$id" | grep "Description:" | sed 's/Description: //')
    fi
    echo "$id - $description" # Inclui o ID junto com a descri√ß√£o
  done
}

# Fun√ß√£o para definir o dispositivo de sa√≠da padr√£o
set_output_device() {
  local sink_id=$1
  echo "Tentando definir o dispositivo de sa√≠da para ID: $sink_id" # Debug
  pactl set-default-sink "$sink_id" && {
    description=$(pactl list sinks | grep -A60 "^Sink #$sink_id" | grep "node.nick =" | sed 's/.*node.nick = "\(.*\)"/\1/')
    if [ -z "$description" ]; then
      description=$(pactl list sinks | grep -A20 "^Sink #$sink_id" | grep "Description:" | sed 's/Description: //')
    fi
    notify-send "üü¢ Sucesso" "Dispositivo de sa√≠da alterado para <b>$description</b>"
    echo "Dispositivo de sa√≠da definido com sucesso."
  } || {
    notify-send "üî¥ Erro" "Falha ao alterar dispositivo de sa√≠da."
    echo "Falha ao alterar dispositivo de sa√≠da."
  }
}

# Fun√ß√£o para definir o dispositivo de entrada padr√£o
set_input_device() {
  local source_id=$1
  echo "Tentando definir o dispositivo de entrada para ID: $source_id" # Debug
  pactl set-default-source "$source_id" && {
    description=$(pactl list sources | grep -A60 "^Source #$source_id" | grep "node.nick =" | sed 's/.*node.nick = "\(.*\)"/\1/')
    if [ -z "$description" ]; then
      description=$(pactl list sources | grep -A20 "^Source #$source_id" | grep "Description:" | sed 's/Description: //')
    fi
    notify-send "Dispositivo de entrada alterado para $description"
    echo "Dispositivo de entrada definido com sucesso."
  } || {
    notify-send "Falha ao alterar dispositivo de entrada."
    echo "Falha ao alterar dispositivo de entrada."
  }
}

# Exibe menu inicial para escolher o tipo de dispositivo
DEVICE_TYPE=$(echo -e "üîä Sa√≠da\nüé§ Entrada\n‚óÄÔ∏è Sair" | wofi -n --width 400 --height 300 -d -p "Escolha uma Op√ß√£o")

# Exibe o menu de dispositivos dispon√≠veis e define o dispositivo selecionado
case "$DEVICE_TYPE" in
"üîä Sa√≠da")
  OUTPUT_DEVICE=$(list_output_devices | wofi -n --dmenu --width 400 --height 300 -d -p "Dispositivos de Sa√≠da" | awk '{print $1}')
  if [ -n "$OUTPUT_DEVICE" ]; then
    set_output_device "$OUTPUT_DEVICE"
  else
    notify-send "Nenhum dispositivo de sa√≠da selecionado."
  fi
  ;;
"üé§ Entrada")
  INPUT_DEVICE=$(list_input_devices | wofi -n --dmenu --width 400 --height 300 -d -p "Dispositivos de Entrada" | awk '{print $1}')
  if [ -n "$INPUT_DEVICE" ]; then
    set_input_device "$INPUT_DEVICE"
  else
    notify-send "Nenhum dispositivo de entrada selecionado."
  fi
  ;;
"Sair")
  exit 0
  ;;
*)
  notify-send "Op√ß√£o inv√°lida selecionada."
  ;;
esac
